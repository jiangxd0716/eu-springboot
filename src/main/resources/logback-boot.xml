<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于或等于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->

<!--scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!--debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

    <!-- 从配置文件中读取数据库配置 -->
    <springProperty scope="context" name="db_drive_class_name" source="spring.datasource.druid.driver-class-name"/>
    <springProperty scope="context" name="db_url" source="spring.datasource.druid.url"/>
    <springProperty scope="context" name="db_username" source="spring.datasource.druid.username"/>
    <springProperty scope="context" name="db_password" source="spring.datasource.druid.password"/>

    <!-- 输出到控制台的配置-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 只有 ERROR 才打印到控制台，在正式环境控制台日志太多了，想看详细日志去数据库看好了，控制台用于提示最重要的信息 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 将日志写入数据库 -->
    <appender name="DB-MYSQL" class="com.eu.frame.common.log.LogBackDBAppender">
        <connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">
            <dataSource class="com.alibaba.druid.pool.DruidDataSource">
                <driverClassName>${db_drive_class_name}</driverClassName>
                <url>${db_url}</url>
                <username>${db_username}</username>
                <password>${db_password}</password>
            </dataSource>
        </connectionSource>
        <!-- 接受 INFO 及以上级别的日志存储到数据库 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!-- logger配置 -->
    <!-- name属性定义该logger所控制的包路径 -->
    <!-- level属性控制name属性定义的包路径下的日志级别，打印包含该级别及以上的全部日志 -->
    <!-- 日志级别由高到低依次为：FATAL > ERROR > WARN > INFO > DEBUG > TRACE -->
    <!-- additivity,设置为true时，该logger将会向上传递，此处这样设置，将会在控制台中输入相关的信息。 -->
    <!-- 此处要求 com.tem 包下的 DEBUG 及以上级别的日志都给到控制台和数据库, 数据库会对级别再进行过滤 -->
    <logger name="com.tem" level="DEBUG" additivity="true">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="DB-MYSQL"/>
    </logger>

    <!--  特殊的logger，根logger，若logger向上传递，则会将日志传递到该节点-->
    <!-- 最小日志级别及以上都需要在控制台输出，生产环境关闭提升日志级别 -->
    <!-- 此处其它包中的日志, 只有 ERROR 级别的日志才会打印到控制台和数据库 -->
    <root level="ERROR">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="DB-MYSQL"/>
    </root>

</configuration>
